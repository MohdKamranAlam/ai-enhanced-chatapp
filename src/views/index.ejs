<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chat Application</title>
    <link rel="stylesheet" type="text/css" href="/style.css">
</head>
<body>
    <div id="chat-box">
        <div id="messages">
            <!-- Messages will be displayed here -->
        </div>
        <div id="input-area">
            <input type="text" id="message-input" placeholder="Type your message here...">
            <button id="send-button">Send</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const messagesDiv = document.getElementById('messages');

            document.getElementById('send-button').addEventListener('click', () => {
                const messageInput = document.getElementById('message-input');
                const message = messageInput.value;
                messageInput.value = '';

                // Create a container for the user message
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('message', 'user-message');

                // Create an image element
                const userImage = document.createElement('img');
                userImage.src = '/img/user.png'; // Replace with the path to your user image
                userImage.classList.add('user-image');

                // Create a div for the message content
                const messageContent = document.createElement('div');
                messageContent.classList.add('message-content');
                messageContent.textContent = message;

                // Append the image and message content to the container
                userMessageContainer.appendChild(userImage);
                userMessageContainer.appendChild(messageContent);

                // Append the container to the messages div
                messagesDiv.appendChild(userMessageContainer);

                // Send the message to the server via WebSocket
                socket.emit('message', message);
            });

            socket.on('response', (data) => {
                // Display the response message
                const responseMessageDiv = document.createElement('div');
                responseMessageDiv.classList.add('message', 'response-message');

                // Split the message into parts and process each part
                const parts = data.split(/(```[\s\S]+?```)/g);

                parts.forEach(part => {
                    if (part.startsWith("```") && part.endsWith("```")) {
                        // Remove the backticks and create a code element
                        const code = part.slice(3, -3);
                        const pre = document.createElement('pre');
                        const codeElement = document.createElement('code');
                        codeElement.textContent = code.trim();
                        pre.appendChild(codeElement);
                        responseMessageDiv.appendChild(pre);
                    } else if (part.trim() !== '') {
                        // Create a text element for other text
                        const textElement = document.createElement('p');
                        textElement.textContent = part;
                        responseMessageDiv.appendChild(textElement);
                    }
                });

                // Append the response message to the messages div
                messagesDiv.appendChild(responseMessageDiv);
            });
        });
    </script>
</body>
</html>
